/* ScummVM - Graphic Adventure Engine
 *
 * ScummVM is the legal property of its developers, whose names
 * are too numerous to list here. Please refer to the COPYRIGHT
 * file distributed with this source distribution.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 * $URL: https://scummvm-misc.svn.sourceforge.net/svnroot/scummvm-misc/trunk/engines/gargoyle/frotz_static.cpp $
 * $Id: frotz_static.cpp 1 2009-09-21 10:46:54Z dreammaster $
 *
 */

#include "gargoyle/frotz_static.h"

#include "common/util.h"

namespace Frotz {

/* Define stuff for stricter Z-code error checking, for the generic
   Unix/DOS/etc terminal-window interface. Feel free to change the way
   player prefs are specified, or replace report_zstrict_error() 
   completely if you want to change the way errors are reported. */

const char *err_messages[] = {
	"Text buffer overflow",
	"Store out of dynamic memory",
	"Division by zero",
	"Illegal object",
	"Illegal attribute",
	"No such property",
	"Stack overflow",
	"Call to illegal address",
	"Call to non-routine",
	"Stack underflow",
	"Illegal opcode",
	"Bad stack frame",
	"Jump to illegal address",
	"Can't save while in interrupt",
	"Nesting stream #3 too deep",
	"Illegal window",
	"Illegal window property",
	"Print at illegal address",
	"Illegal dictionary word length",
	"@jin called with object 0",
	"@get_child called with object 0",
	"@get_parent called with object 0",
	"@get_sibling called with object 0",
	"@get_prop_addr called with object 0",
	"@get_prop called with object 0",
	"@put_prop called with object 0",
	"@clear_attr called with object 0",
	"@set_attr called with object 0",
	"@test_attr called with object 0",
	"@move_object called moving object 0",
	"@move_object called moving into object 0",
	"@remove_object called with object 0",
	"@get_next_prop called with object 0"
};

GameVersionRecord game_records[] = {
	{       SHERLOCK,  97, "871026" },
	{       SHERLOCK,  21, "871214" },
	{       SHERLOCK,  22, "880112" },
	{       SHERLOCK,  26, "880127" },
	{       SHERLOCK,   4, "880324" },
	{    BEYOND_ZORK,   1, "870412" },
	{    BEYOND_ZORK,   1, "870715" },
	{    BEYOND_ZORK,  47, "870915" },
	{    BEYOND_ZORK,  49, "870917" },
	{    BEYOND_ZORK,  51, "870923" },
	{    BEYOND_ZORK,  57, "871221" },
	{    BEYOND_ZORK,  60, "880610" },
	{      ZORK_ZERO,   0, "870831" },
	{      ZORK_ZERO,  96, "880224" },
	{      ZORK_ZERO, 153, "880510" },
	{      ZORK_ZERO, 242, "880830" },
	{      ZORK_ZERO, 242, "880901" },
	{      ZORK_ZERO, 296, "881019" },
	{      ZORK_ZERO, 366, "890323" },
	{      ZORK_ZERO, 383, "890602" },
	{      ZORK_ZERO, 387, "890612" },
	{      ZORK_ZERO, 392, "890714" },
	{      ZORK_ZERO, 393, "890714" },
	{         SHOGUN, 292, "890314" },
	{         SHOGUN, 295, "890321" },
	{         SHOGUN, 311, "890510" },
	{         SHOGUN, 320, "890627" },
	{         SHOGUN, 321, "890629" },
	{         SHOGUN, 322, "890706" },
	{         ARTHUR,  40, "890502" },
	{         ARTHUR,  41, "890504" },
	{         ARTHUR,  54, "890606" },
	{         ARTHUR,  63, "890622" },
	{         ARTHUR,  74, "890714" },
	{        JOURNEY,  46, "880603" },
	{        JOURNEY,   2, "890303" },
	{        JOURNEY,  26, "890316" },
	{        JOURNEY,  30, "890322" },
	{        JOURNEY,  51, "890522" },
	{        JOURNEY,  54, "890526" },
	{        JOURNEY,  77, "890616" },
	{        JOURNEY,  79, "890627" },
	{        JOURNEY,  83, "890706" },
	{ LURKING_HORROR, 203, "870506" },
	{ LURKING_HORROR, 219, "870912" },
	{ LURKING_HORROR, 221, "870918" },
	{           AMFV,  47, "850313" },
	{        UNKNOWN,   0, "------" }
};

GameMapperRecord game_mapper[] = {
	{ ZORK_ZERO,  5, 497, 498 },
	{ ZORK_ZERO,  6, 501, 502 },
	{ ZORK_ZERO,  7, 499, 500 },
	{ ZORK_ZERO,  8, 503, 504 },
	{    ARTHUR, 54, 170, 171 },
	{    SHOGUN, 50,  61,  62 },
	{   UNKNOWN,  0,   0,   0 }
};

zbyte lh_repeats[] = {
	0x00, 0x00, 0x00, 0x01, 0xff,
	0x00, 0x01, 0x01, 0x01, 0x01,
	0xff, 0x01, 0x01, 0xff, 0x00,
	0xff, 0xff, 0xff, 0xff, 0xff
};

/* 
 * According to Matteo De Luigi <matteo.de.luigi@libero.it>, 
 * 0xab and 0xbb were in each other's proper positions.
 *   Sat Apr 21, 2001
 */
zword zscii_to_latin1[] = {
    0x0e4, 0x0f6, 0x0fc, 0x0c4, 0x0d6, 0x0dc, 0x0df, 0x0bb,
    0x0ab, 0x0eb, 0x0ef, 0x0ff, 0x0cb, 0x0cf, 0x0e1, 0x0e9,
    0x0ed, 0x0f3, 0x0fa, 0x0fd, 0x0c1, 0x0c9, 0x0cd, 0x0d3,
    0x0da, 0x0dd, 0x0e0, 0x0e8, 0x0ec, 0x0f2, 0x0f9, 0x0c0,
    0x0c8, 0x0cc, 0x0d2, 0x0d9, 0x0e2, 0x0ea, 0x0ee, 0x0f4,
    0x0fb, 0x0c2, 0x0ca, 0x0ce, 0x0d4, 0x0db, 0x0e5, 0x0c5,
    0x0f8, 0x0d8, 0x0e3, 0x0f1, 0x0f5, 0x0c3, 0x0d1, 0x0d5,
    0x0e6, 0x0c6, 0x0e7, 0x0c7, 0x0fe, 0x0f0, 0x0de, 0x0d0,
    0x0a3, 0x153, 0x152, 0x0a1, 0x0bf
};

const unsigned char tolower_basic_latin[0x100] = {
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
	0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
	0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
	0x40,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,
	0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x5B,0x5C,0x5D,0x5E,0x5F,
	0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,
	0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,
	0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,
	0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,
	0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,
	0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,
	0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,
	0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xD7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xDF,
	0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,
	0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF
};

const unsigned char tolower_latin_extended_a[0x80] = {
	0x01,0x01,0x03,0x03,0x05,0x05,0x07,0x07,0x09,0x09,0x0B,0x0B,0x0D,0x0D,0x0F,0x0F,
	0x11,0x11,0x13,0x13,0x15,0x15,0x17,0x17,0x19,0x19,0x1B,0x1B,0x1D,0x1D,0x1F,0x1F,
	0x21,0x21,0x23,0x23,0x25,0x25,0x27,0x27,0x29,0x29,0x2B,0x2B,0x2D,0x2D,0x2F,0x2F,
	0x00,0x31,0x33,0x33,0x35,0x35,0x37,0x37,0x38,0x3A,0x3A,0x3C,0x3C,0x3E,0x3E,0x40,
	0x40,0x42,0x42,0x44,0x44,0x46,0x46,0x48,0x48,0x49,0x4B,0x4B,0x4D,0x4D,0x4F,0x4F,
	0x51,0x51,0x53,0x53,0x55,0x55,0x57,0x57,0x59,0x59,0x5B,0x5B,0x5D,0x5D,0x5F,0x5F,
	0x61,0x61,0x63,0x63,0x65,0x65,0x67,0x67,0x69,0x69,0x6B,0x6B,0x6D,0x6D,0x6F,0x6F,
	0x71,0x71,0x73,0x73,0x75,0x75,0x77,0x77,0x00,0x7A,0x7A,0x7C,0x7C,0x7E,0x7E,0x7F
};

const unsigned char tolower_greek[0x50] = {
	0x80,0x81,0x82,0x83,0x84,0x85,0xAC,0x87,0xAD,0xAE,0xAF,0x8B,0xCC,0x8D,0xCD,0xCE,
	0x90,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,
	0xC0,0xC1,0xA2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xAC,0xAD,0xAE,0xAF,
	0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,
	0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF
};

const unsigned char tolower_cyrillic[0x60] = {
	0x00,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,
	0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
	0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,
	0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
	0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,
	0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F
};

/* Character bitmap data for the Frotz interpreter character graphics font. */
static const Graphics::bitmap_t _font_bits[] = {
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x2000, 0x6000, 0xfe00, 0x6000, 0x2000, 0x0000, 
	0x0000, 0x0000, 0x0800, 0x0c00, 0xfe00, 0x0c00, 0x0800, 0x0000, 
	0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000, 0x8000, 
	0x8000, 0x4000, 0x2000, 0x1000, 0x0800, 0x0400, 0x0200, 0x0100, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0xff00, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0xff00, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 
	0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 
	0x0800, 0x0800, 0x0800, 0xff00, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0xff00, 0x0800, 0x0800, 0x0800, 
	0x0800, 0x0800, 0x0800, 0x0800, 0x0f00, 0x0800, 0x0800, 0x0800, 
	0x1000, 0x1000, 0x1000, 0x1000, 0xf000, 0x1000, 0x1000, 0x1000, 
	0x1000, 0x1000, 0x1000, 0x1000, 0x1f00, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x1f00, 0x1000, 0x1000, 0x1000, 0x1000, 
	0x0000, 0x0000, 0x0000, 0xf800, 0x0800, 0x0800, 0x0800, 0x0800, 
	0x0800, 0x0800, 0x0800, 0x0800, 0xf800, 0x0000, 0x0000, 0x0000, 
	0x1000, 0x1000, 0x1000, 0x1000, 0x1f00, 0x2000, 0x4000, 0x8000, 
	0x8000, 0x4000, 0x2000, 0x1f00, 0x1000, 0x1000, 0x1000, 0x1000, 
	0x0100, 0x0200, 0x0400, 0xf800, 0x0800, 0x0800, 0x0800, 0x0800, 
	0x0800, 0x0800, 0x0800, 0x0800, 0xf800, 0x0400, 0x0200, 0x0100, 
	0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 
	0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 
	0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
	0x1f00, 0x1f00, 0x1f00, 0x1f00, 0x1f00, 0x1f00, 0x1f00, 0x1f00, 
	0x0800, 0x0800, 0x0800, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 
	0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0x0800, 0x0800, 0x0800, 
	0xf800, 0xf800, 0xf800, 0xf800, 0xff00, 0xf800, 0xf800, 0xf800, 
	0x1f00, 0x1f00, 0x1f00, 0x1f00, 0xff00, 0x1f00, 0x1f00, 0x1f00, 
	0x1f00, 0x1f00, 0x1f00, 0x1f00, 0x1f00, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x1f00, 0x1f00, 0x1f00, 0x1f00, 0x1f00, 
	0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
	0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 
	0x1f00, 0x1f00, 0x1f00, 0x1f00, 0x1f00, 0x2000, 0x4000, 0x8000, 
	0x8000, 0x4000, 0x2000, 0x1f00, 0x1f00, 0x1f00, 0x1f00, 0x1f00, 
	0x0100, 0x0200, 0x0400, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
	0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0400, 0x0200, 0x0100, 
	0x0100, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0100, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8000, 
	0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0xff00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xff00, 
	0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 
	0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 
	0x0000, 0xff00, 0x0000, 0x0000, 0x0000, 0x0000, 0xff00, 0x0000, 
	0x0000, 0xff00, 0x8000, 0x8000, 0x8000, 0x8000, 0xff00, 0x0000, 
	0x0000, 0xff00, 0xc000, 0xc000, 0xc000, 0xc000, 0xff00, 0x0000, 
	0x0000, 0xff00, 0xe000, 0xe000, 0xe000, 0xe000, 0xff00, 0x0000, 
	0x0000, 0xff00, 0xf000, 0xf000, 0xf000, 0xf000, 0xff00, 0x0000, 
	0x0000, 0xff00, 0xf800, 0xf800, 0xf800, 0xf800, 0xff00, 0x0000, 
	0x0000, 0xff00, 0xfc00, 0xfc00, 0xfc00, 0xfc00, 0xff00, 0x0000, 
	0x0000, 0xff00, 0xfe00, 0xfe00, 0xfe00, 0xfe00, 0xff00, 0x0000, 
	0x0000, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0x0000, 
	0x0000, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0100, 0x0000, 
	0x0000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x0000, 
	0x8100, 0x4200, 0x2400, 0x1800, 0x1800, 0x2400, 0x4200, 0x8100, 
	0x0800, 0x0800, 0x0800, 0x0800, 0xff00, 0x0800, 0x0800, 0x0800, 
	0x1800, 0x3c00, 0xdb00, 0x1800, 0x1800, 0x1800, 0x1800, 0x0000, 
	0x1800, 0x1800, 0x1800, 0x1800, 0xdb00, 0x3c00, 0x1800, 0x0000, 
	0x1800, 0x3c00, 0xdb00, 0x1800, 0xdb00, 0x3c00, 0x1800, 0x0000, 
	0xff00, 0x8100, 0x8100, 0x8100, 0x8100, 0x8100, 0x8100, 0xff00, 
	0x3c00, 0x6600, 0x0600, 0x0c00, 0x1800, 0x0000, 0x1800, 0x0000, 
	0xc400, 0xa800, 0x9000, 0xc000, 0xa000, 0x9000, 0x8000, 0x0000, 
	0x6000, 0x5000, 0x4800, 0x7000, 0x4800, 0x5000, 0x6000, 0x0000, 
	0x1000, 0x1800, 0x1400, 0x9200, 0x5000, 0x3000, 0x1000, 0x0000, 
	0x8200, 0xc600, 0xaa00, 0x9200, 0xaa00, 0xc600, 0x8200, 0x0000, 
	0x8200, 0xc600, 0xaa00, 0x9200, 0x8200, 0x8200, 0x8200, 0x0000, 
	0x9400, 0xa800, 0xd000, 0xa000, 0xc000, 0x8000, 0x8000, 0x0000, 
	0x8200, 0x4400, 0x2800, 0x1000, 0x2800, 0x4400, 0x8200, 0x0000, 
	0xc200, 0xa200, 0xd200, 0xaa00, 0x9600, 0x8a00, 0x8600, 0x0000, 
	0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 
	0x1000, 0x3800, 0x5400, 0x9200, 0x5400, 0x3800, 0x1000, 0x0000, 
	0x1000, 0x1000, 0x1000, 0x3800, 0x5400, 0x9200, 0x9200, 0x0000, 
	0x1000, 0x1800, 0x1400, 0x1200, 0x1000, 0x1000, 0x1000, 0x0000, 
	0xc600, 0xaa00, 0x9200, 0xaa00, 0xc600, 0x8200, 0x8200, 0x0000, 
	0x9000, 0x5000, 0x3800, 0x1400, 0x1200, 0x1000, 0x1000, 0x0000, 
	0xc400, 0xac00, 0xd400, 0xa800, 0x9000, 0x8000, 0x8000, 0x0000, 
	0x8000, 0x8000, 0x8000, 0x9000, 0xa800, 0xc400, 0x8200, 0x0000, 
	0x4000, 0x4000, 0x4000, 0x7800, 0x4400, 0x4400, 0x4400, 0x0000, 
	0x6000, 0x5000, 0x4800, 0x5000, 0x6000, 0x5000, 0x4800, 0x0000, 
	0x4000, 0x4400, 0x4c00, 0x5400, 0x6400, 0x4400, 0x0400, 0x0000, 
	0x1000, 0x3800, 0x5400, 0x9200, 0x1000, 0x1000, 0x1000, 0x0000, 
	0x6000, 0x5000, 0x4800, 0x4400, 0x4400, 0x4400, 0x4400, 0x0000, 
	0x1000, 0xba00, 0x5400, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 
	0x6000, 0x5000, 0x4800, 0x5000, 0x6000, 0x4000, 0x4000, 0x0000, 
	0x9200, 0x5400, 0x3800, 0x1000, 0x1000, 0x1000, 0x1000, 0x0000, 
	0xe000, 0xd000, 0xa800, 0x9400, 0x9a00, 0x9600, 0x9200, 0x0000, 
	0x1000, 0x2800, 0x4400, 0x2800, 0x1000, 0x2800, 0x4400, 0x0000, 
	0xe700, 0xc300, 0x2400, 0xe700, 0xe700, 0xe700, 0xe700, 0xff00, 
	0xe700, 0xe700, 0xe700, 0xe700, 0x2400, 0xc300, 0xe700, 0xff00, 
	0xe700, 0xc300, 0x2400, 0xe700, 0x2400, 0xc300, 0xe700, 0xff00, 
	0xc300, 0x9900, 0xf900, 0xf300, 0xe700, 0xff00, 0xe700, 0xff00, 
};

static const unsigned long _font_offset[] = {
	0,	/* (0x20) */
	8,	/* (0x21) */
	16,	/* (0x22) */
	24,	/* (0x23) */
	32,	/* (0x24) */
	40,	/* (0x25) */
	48,	/* (0x26) */
	56,	/* (0x27) */
	64,	/* (0x28) */
	72,	/* (0x29) */
	80,	/* (0x2a) */
	88,	/* (0x2b) */
	96,	/* (0x2c) */
	104,	/* (0x2d) */
	112,	/* (0x2e) */
	120,	/* (0x2f) */
	128,	/* (0x30) */
	136,	/* (0x31) */
	144,	/* (0x32) */
	152,	/* (0x33) */
	160,	/* (0x34) */
	168,	/* (0x35) */
	176,	/* (0x36) */
	184,	/* (0x37) */
	192,	/* (0x38) */
	200,	/* (0x39) */
	208,	/* (0x3a) */
	216,	/* (0x3b) */
	224,	/* (0x3c) */
	232,	/* (0x3d) */
	240,	/* (0x3e) */
	248,	/* (0x3f) */
	256,	/* (0x40) */
	264,	/* (0x41) */
	272,	/* (0x42) */
	280,	/* (0x43) */
	288,	/* (0x44) */
	296,	/* (0x45) */
	304,	/* (0x46) */
	312,	/* (0x47) */
	320,	/* (0x48) */
	328,	/* (0x49) */
	336,	/* (0x4a) */
	344,	/* (0x4b) */
	352,	/* (0x4c) */
	360,	/* (0x4d) */
	368,	/* (0x4e) */
	376,	/* (0x4f) */
	384,	/* (0x50) */
	392,	/* (0x51) */
	400,	/* (0x52) */
	408,	/* (0x53) */
	416,	/* (0x54) */
	424,	/* (0x55) */
	432,	/* (0x56) */
	440,	/* (0x57) */
	448,	/* (0x58) */
	456,	/* (0x59) */
	464,	/* (0x5a) */
	472,	/* (0x5b) */
	480,	/* (0x5c) */
	488,	/* (0x5d) */
	496,	/* (0x5e) */
	504,	/* (0x5f) */
	512,	/* (0x60) */
	520,	/* (0x61) */
	528,	/* (0x62) */
	536,	/* (0x63) */
	544,	/* (0x64) */
	552,	/* (0x65) */
	560,	/* (0x66) */
	568,	/* (0x67) */
	576,	/* (0x68) */
	584,	/* (0x69) */
	592,	/* (0x6a) */
	600,	/* (0x6b) */
	608,	/* (0x6c) */
	616,	/* (0x6d) */
	624,	/* (0x6e) */
	632,	/* (0x6f) */
	640,	/* (0x70) */
	648,	/* (0x71) */
	656,	/* (0x72) */
	664,	/* (0x73) */
	672,	/* (0x74) */
	680,	/* (0x75) */
	688,	/* (0x76) */
	696,	/* (0x77) */
	704,	/* (0x78) */
	712,	/* (0x79) */
	720,	/* (0x7a) */
	728,	/* (0x7b) */
	736,	/* (0x7c) */
	744,	/* (0x7d) */
	752		/* (0x7e) */
};

/* Infocom character graphics font used in Beyond Zork. Note that whilst the raw data is for 8x8, the font 
 * needs to be defined as 8x14, so as to match the size of the ScummVM big font
 */
const Graphics::FontDesc infocomGfxFont = {
	"InfocomCharGfx",
	8,
	14,
	8, 8, 0, 0,
	11,
	32,
	95,
	_font_bits,
	_font_offset,
	NULL,  /* fixed width*/
	NULL,  /* fixed bbox*/
	32,
	sizeof(_font_bits)/sizeof(Graphics::bitmap_t)
};

struct FrotzStringRecord {
	Common::Language lang;
	int id;
	const char *s;
};

FrotzStringRecord frotz_strings[] = {
	{Common::EN_ANY, IDS_BLORB_GLULX, "You have attempted to load a Blorb file containing a\n"
		"Glulx game. For this game you need a Glulx interpreter\ninstead. Try loading "
		"this file into Windows Glulxe."},
	{Common::EN_ANY, IDS_BLORB_NOEXEC, "You have attempted to load a Blorb file that does not\n"
		"contain any recognized game data. It may be a Blorb file\n"
		"containing just graphics or sound data for a game, with\n"
		"the game in a separate file. Check for a file with the\n"
		"same name but an extension of .z5, .z6 or .z8 and try\n"
		"loading that into Windows Frotz instead."},
	{Common::EN_ANY, IDS_MORE, "[More]"},
	{Common::EN_ANY, IDS_HIT_KEY_EXIT, "[Hit any key to exit.]"},
	{Common::EN_ANY, IDS_TITLE, "Windows Frotz"},
	{Common::EN_ANY, IDS_FATAL, "Frotz Fatal Error"},
	{Common::EN_ANY, IDS_ZCODE_FILTER, "Z-code Files (.z?;.zlb;.zblorb)|*.z?;*.zlb;*.zblorb|Infocom Files (.dat;.zip)|*.dat;*.zip|All Files (*.*)|*.*||"},
	{Common::EN_ANY, IDS_ZCODE_TITLE, "Open a Z-code Game"},
	{Common::EN_ANY, IDS_SAVE_FILTER, "Saved Games (.sav)|*.sav|All Files (*.*)|*.*||"},
	{Common::EN_ANY, IDS_SAVE_TITLE, "Save the current game"},
	{Common::EN_ANY, IDS_RESTORE_TITLE, "Restore a saved game"},
	{Common::EN_ANY, IDS_SCRIPT_FILTER, "Transcript Log Files (.log)|*.log|All Files (*.*)|*.*||"},
	{Common::EN_ANY, IDS_SCRIPT_TITLE, "Write out a script"},
	{Common::EN_ANY, IDS_RECORD_FILTER, "Record Files (.rec)|*.rec|All Files (*.*)|*.*||"},
	{Common::EN_ANY, IDS_RECORD_TITLE, "Record input to a file"},
	{Common::EN_ANY, IDS_PLAYBACK_TITLE, "Play back recorded input"	},
	{Common::UNK_LANG, 0, NULL}
};	

const char *sysString(Common::Language lang, SystemStringId stringId) {
	// Scan through the list for the given Id
	FrotzStringRecord *p = &frotz_strings[0];
	while (p->lang != Common::UNK_LANG) {
		if ((p->lang == lang) && (p->id == stringId))
			return p->s;

		++p;
	}

	// String not found, fall back on the english version
	p = &frotz_strings[0];
	while ((p->lang != Common::UNK_LANG) && (p->id != stringId))
		++p;

	return p->s;
}

} // end of namespace Frotz
